{"version":3,"sources":["../../src/template.js"],"names":["filterRevertedCommits","logs","commitHash","forEach","l","revision","reduced","reduce","acc","log","reverted","revertedCommit","revertedBy","add","Set","Array","from","decorateTicketReverts","tickets","ticket","commits","length","_","sortBy","commit","date","reverse","lastCommit","getTicketReporters","reporters","email","displayName","fields","reporter","name","slackUser","push","Object","values","item","groupTicketsByStatus","config","approvalStatus","jira","approved","pending","isArray","out","statusMatch","map","s","toLowerCase","status","includes","transformCommitLogs","reducedLogs","ticketHash","all","key","ticketList","issuetype","tixByStatus","pendingByOwner","filter","noTickets","t","generateTemplateData","changelog","releaseVersions","data","transformData","Promise","resolve","baseUrl","renderTemplate","ejs","render","template"],"mappings":"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","sourcesContent":["\nimport ejs from 'ejs';\nimport _ from 'lodash';\n\n\n/**\n * Filter revert commits out of a commit log list, if the original commit is present.\n * i.e. for each revert there are 2 commits: the original commit & the commit which was reverted.\n * We only need to keep one of them.\n *\n * For example input:\n * ```\n *    const logs = [\n *      { revision: 10 },\n *      { revision: 11, reverted: 5, }, // original commit not present\n *      { revision: 12 },\n *      { revision: 13, reverted: 10 }, // original commit is present\n *    ];\n * ```\n *\n * Will create this output:\n * ```\n *    {\n *      { revision: 10, reverted: 13 } // reverted BY 13\n *      { revision: 11, reverted: 5, } // reverted 5, which is not present\n *      { revision: 12 },\n *    }\n * ```\n *  + Revision 13 is removed because it merely reverts revision 10\n *  + Revision 11 remains because the commit is reverts is not in the list.\n *\n * @param {Array} logs - List of commit logs\n * @return {Object} containing: reverted, current\n */\nexport function filterRevertedCommits(logs) {\n  // Convenient commit lookup\n  const commitHash = {};\n  logs.forEach(l => commitHash[l.revision] = l);\n\n  // Track reverted commits, and only keep one of the commits (orig or reverter)\n  const reduced = logs.reduce((acc, log) => {\n    if (log.reverted) {\n      // If the commit we're reverting is in the list, remove the revert commit\n      const revertedCommit = commitHash[log.reverted]\n      if (revertedCommit) {\n        revertedCommit.revertedBy = log.revision;\n        acc.add(revertedCommit);\n      } else {\n        acc.add(log);\n      }\n    } else {\n      acc.add(log);\n    }\n    return acc;\n  }, new Set());\n\n  return Array.from(reduced);\n}\n\n/**\n * Mark tickets as reverted, if their latest git commit was a commit.\n *\n * @param {Array} tickets - Array of jira ticket objects, each with a commit list\n * @return {Array}\n */\nexport function decorateTicketReverts(tickets) {\n  tickets.forEach((ticket) => {\n    if (!ticket.commits || !ticket.commits.length) {\n      ticket.reverted = null;\n      return;\n    }\n    const commits = _.sortBy(ticket.commits, commit => commit.date).reverse();\n    const lastCommit = commits[0];\n    ticket.reverted = lastCommit.reverted || lastCommit.revertedBy;\n  });\n  return tickets;\n}\n\n/**\n * Fetch the contact information of the reporters of a list of tickets.\n *\n * @param {Array} tickets\n * @return {Object}\n */\nexport function getTicketReporters(tickets) {\n  const reporters = {};\n\n  tickets.forEach((ticket) => {\n    const { email, displayName } = ticket.fields.reporter;\n    if (!reporters[email]) {\n      reporters[email] = {\n        email,\n        name: displayName,\n        slackUser: ticket.slackUser,\n        tickets: [ticket]\n      };\n    } else {\n      reporters[email].tickets.push(ticket);\n    }\n  });\n\n  // Sort list by name\n  return _.sortBy(Object.values(reporters), item => item.name);\n}\n\n/**\n * Return the Jira tickets who's status does not match the possible \"approvalStatus\" values\n * in the config.\n * @param {Object} config - The config object provided by Config.getConfigForPath\n * @param {Array} tickets - List of Jira tickets\n * @param {Array}\n */\nexport function groupTicketsByStatus(config, tickets) {\n  let { approvalStatus } = config.jira;\n  if (!approvalStatus) {\n    return {\n      approved: [],\n      pending: tickets,\n    };\n  }\n\n  if (!Array.isArray(approvalStatus)) {\n    approvalStatus = [approvalStatus];\n  }\n\n  const out = {\n    approved: [],\n    pending: [],\n  };\n  const statusMatch = approvalStatus.map(s => s.toLowerCase());\n  tickets.forEach((ticket) => {\n    const name = ticket.fields.status.name.toLowerCase();\n    if (statusMatch.includes(name)) {\n      out.approved.push(ticket);\n    } else {\n      out.pending.push(ticket);\n    }\n  });\n\n  return out;\n}\n\n/**\n * Filter commit logs into template data.\n *\n * Data:\n * -----\n *  {\n *    commits: {\n *      all: [],       // all commits\n *      tickets: [],   // commits associated with jira tickets\n *      noTickets: [], // commits not associated with jira tickets\n *    },\n *    tickets: {\n *      all: [],       // all tickets\n *      approved: [],  // tickets marked as approved\n *      pending: [],   // tickets not marked as approved\n *      pendingByOwner: [], // pending tickets arranged under ticket reporters.\n *    }\n *  }\n *\n * @param {Object} config - The config object provided by Config.getConfigForPath\n * @param {Array} logs - List of commit logs and their jira tickets.\n *\n * @return {Promise} Resolves to an object with filtered commit/ticket data\n */\nexport function transformCommitLogs(config, logs) {\n  // Filter reverts\n  const reducedLogs = filterRevertedCommits(logs);\n\n  // Organize logs by jira ticket keys\n  const ticketHash = reducedLogs.reduce((all, log) => {\n    log.tickets.forEach((ticket) => {\n      all[ticket.key] = all[ticket.key] || ticket;\n      all[ticket.key].commits = all[ticket.key].commits || [];\n      all[ticket.key].commits.push(log);\n    });\n    return all;\n  }, {});\n\n  // Mark tickets as reverted\n  decorateTicketReverts(Object.values(ticketHash));\n\n  // Sort tickets by type name and get pending tickets\n  let ticketList = _.sortBy(Object.values(ticketHash), ticket => ticket.fields.issuetype.name);\n  let tixByStatus = groupTicketsByStatus(config, ticketList);\n  const pendingByOwner = getTicketReporters(tixByStatus.pending);\n\n  // Output filtered data\n  return {\n    commits: {\n      all: reducedLogs,\n      tickets: reducedLogs.filter(commit => commit.tickets.length),\n      noTickets: reducedLogs.filter(commit => !commit.tickets.length),\n      reverted: reducedLogs.filter(l => l.reverted || l.revertedBy),\n    },\n    tickets: {\n      pendingByOwner,\n      all: ticketList,\n      approved: tixByStatus.approved,\n      pending: tixByStatus.pending,\n      reverted: ticketList.filter(t => t.reverted),\n    }\n  }\n}\n\n/**\n * Create data object for the changelog template\n *\n * @param {Object} config - The configuration object\n * @param {Array} changelog - The changelog list.\n * @param {Array} releaseVersions - Jira release versions for this changelog.\n *\n * @return {String}\n */\nexport async function generateTemplateData(config, changelog, releaseVersions) {\n  let data = await transformCommitLogs(config, changelog);\n  if (typeof config.transformData == 'function') {\n    data = await Promise.resolve(config.transformData(data));\n  }\n  data.jira = {\n    baseUrl: config.jira.baseUrl,\n    releaseVersions: releaseVersions,\n  };\n\n  return data;\n}\n\n/**\n * Render the changelog template and provide output.\n *\n * @param {Object} config - The configuration object\n * @param {Array} data - Template data created by `generateTemplateData()`\n *\n * @return {String}\n */\nexport function renderTemplate(config, data) {\n  return ejs.render(config.template, data);\n}\n"],"file":"template.js"}