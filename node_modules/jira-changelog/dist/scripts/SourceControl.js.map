{"version":3,"sources":["../../src/SourceControl.js"],"names":["SourceControl","constructor","config","slack","Slack","getCommitLogs","workspaceDir","range","workspace","Promise","resolve","reject","opts","format","revision","date","summary","fullText","authorName","authorEmail","parents","symmetric","log","err","response","graph","simpleTopLevelGraph","all","logs","consolodateCommitMessages","promises","map","findUser","catch","console","then","slackUser","push","isRevert","oneLine","replace","trim","match","revertSha","revertSummary","numReverts","length","hashes","logObjs","l","split","prev","slice","merged","reverted","relatedLogs","logItem","out","related","forEach","hash","relatedObj","concat","topLevelLog","commits","item"],"mappings":"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","sourcesContent":["import Slack from './Slack';\nimport git from 'simple-git';\n\n/**\n * Connect to the source control system and return commit logs for a range.\n * Currenty this only connects to git.\n *\n * Range Object\n * ------------\n * The range object should contain at least one of the following properties:\n * ```\n * {\n *   from:   {String}  The commit revision or branch name to start from, inclusive.\n *   to:     {String}  The commit revision or branch name to go to, inclusive.\n *   after:  {DateStr} Only commits after this date.\n *   before: {DateStr} Only comits before this date.\n * }\n * ```\n *\n *\n * Commit Log Object\n * ------------------\n * Each commit log object will look like the following:\n *\n * ```\n * {\n *   revision: <commit revision hash>,\n *   date: <date>,\n *   summary: <short commit message>,\n *   fullText: <full commit message>,\n *   authorName: <name of commit author>,\n *   authorEmail: <email of commit author>,\n *   slackUser: <object of slack user, as matched by authorEmail>\n * }\n * ```\n *\n */\nexport default class SourceControl {\n\n  constructor(config) {\n    this.slack = new Slack(config);\n  }\n\n  /**\n   * Return top-level commit logs for a range.\n   * Commits which were the result of a merge are nested under `<log>.graph.merged`.\n   *\n   * @param {String} dir The source control workspace directory.\n   * @param {Object} range An object defining the range boundaries (see above)\n   *\n   * @return {Promsie} Resolves to a list of top-level commit objects\n   */\n  getCommitLogs(workspaceDir, range) {\n    const workspace = git(workspaceDir);\n\n    return new Promise((resolve, reject) => {\n\n      const opts = {\n        format: {\n          revision: '%H',\n          date: '%ai',\n          summary: '%s%d',\n          fullText: '%s\\n%d\\n%b',\n          authorName: '%aN',\n          authorEmail: '%ae',\n          parents: '%P'\n        },\n        symmetric: false,\n        ...range,\n      }\n\n      workspace.log(opts, (err, response) => {\n        if (err) {\n          return reject(err);\n        }\n\n        // Organize commits\n        const graph = this.simpleTopLevelGraph(response.all);\n        const logs = this.consolodateCommitMessages(graph);\n\n        // Add slack users to commit logs\n        const promises = logs.map((log) => {\n          return this.slack.findUser(log.authorEmail, log.authorName)\n            .catch((err) => { console.log(err); }) // ignore errors\n            .then((slackUser) => {\n              log.slackUser = slackUser;\n              return log;\n            });\n        });\n        promises.push(Promise.resolve());\n\n        Promise.all(promises).then(() => {\n          resolve(logs);\n        });\n      });\n    });\n  }\n\n  /**\n   * Determine if a commit is a revert.\n   * If a log is a \"revert of a revert\", if will not be marked as a\n   * revert because it is assumed to be truly an \"unrevert\".\n   *\n   * Unfortunately git does not add any revert metadata to a revision,\n   * so to detect a revert we look for the default text added by git:\n   *    \"This reverts commit <sha>.\"\n   *\n   * If we wanted to get really clever, we could fetch the revision this commit\n   * reverts and confirm the diff is exactly the opposite, but that might be overkill.\n   *\n   * @param {Object} log - A single commit log objedt\n   * @return {String or null} - The reverted sha or null if it is not a revert\n   */\n  isRevert(log) {\n    const oneLine = log.fullText.replace(/\\n/g, ' ').trim();\n    const match = oneLine.match(/^Revert \".*?This reverts commit ([0-9a-z]+)\\.$/);\n\n    // Is it a revert\n    if (match) {\n      const [, revertSha] = match;\n\n      // If the summary has an even number of reverts listed, it has been unreverted\n      const revertSummary = log.summary.match(/^(Revert \")+/g);\n      const numReverts = revertSummary[0].match(/Revert/g).length;\n      if (numReverts % 2 !== 0) {\n        return revertSha;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Create a simple 1-level-deep graph of commit logs.\n   * Returns an array of top-level commits, each which contains\n   * any merged commits inside of it's `.graph.merged` property array.\n   *\n   * For example, with this git graph:\n   *    1\n   *    2\n   *    3 ⟍\n   *    4   2a\n   *    5   2b\n   *    6 ⟋\n   *    7 ⟍\n   *    8   6a\n   *    9   6b ⟍\n   *    10       6b1\n   *    11       6b2\n   *    12  6c ⟋\n   *    13  6d\n   *    14 ⟋\n   *    15\n   *\n   * The simplfied graph would look like:\n   *\n   *    - 1\n   *    - 2\n   *        ↳ 2a\n   *        ↳ 2b\n   *    - 3\n   *    - 4\n   *    - 5\n   *    - 6\n   *        ↳ 6a\n   *        ↳ 6b\n   *        ↳ 6b1\n   *        ↳ 6b2\n   *        ↳ 6c\n   *        ↳ 2d\n   *    - 7\n   *    - 8\n   *    - 9\n   *    - 10\n   *    - 11\n   *    - 12\n   *    - 13\n   *    - 14\n   *\n   * @param {Array} logs\n   * @return {Array}\n   */\n  simpleTopLevelGraph(logs) {\n    const hashes = {};\n    const graph = [];\n\n    // First get the hashes from all commits and turn parents into an array\n    // and decorate each log with the 'reverted' property\n    const logObjs = logs.map((l) => {\n      const log = { ...l };\n      const parents = log.parents.split(' ');\n\n      // Create log graph\n      log.graph = {\n        prev: parents[0],\n        parents: parents.slice(1),\n        merged: [],\n      };\n\n      // Decorate it with the revert property\n      log.reverted = this.isRevert(log);\n\n      hashes[log.revision] = log;\n      return log;\n    });\n\n    // Get mainline commits (not commits merged in from other branches)\n    let log = logObjs[0];\n    while (log) {\n      graph.push(log);\n      delete hashes[log.revision];\n      log = hashes[log.graph.prev];\n    }\n\n    // Add all merged commits under mainline\n    function relatedLogs(logItem) {\n      let out = [];\n      if (!logItem || !logItem.graph) {\n        return;\n      }\n      const related = [\n        logItem.graph.prev,\n        logItem.graph.parents\n      ];\n\n      related.forEach((hash) => {\n        const relatedObj = hashes[hash];\n        if (relatedObj) {\n          delete hashes[hash];\n          out = out.concat(relatedObj);\n          out = out.concat(relatedLogs(relatedObj));\n        }\n      });\n\n      return out;\n    }\n    graph.forEach((topLevelLog) => {\n      topLevelLog.graph.merged = relatedLogs(topLevelLog);\n    });\n\n    return graph;\n  }\n\n  /**\n   * Given the commit graph (see simpleTopLevelGraph), combine all merged commit\n   * messages (fullText only) strings into a single string at the merge commit.\n   *\n   * NOTE: reverted commit messages will not be included, as their message is now no\n   * longer valid.\n   *\n   * For example, with this git graph:\n   *    1\n   *    2\n   *    3 ⟍\n   *    4   2a\n   *    5   2b\n   *    6 ⟋\n   *\n   * Revision 6 would contain the commit messages from revision 6, 2a, and 2b.\n   *\n   * @param {Array} graph - Commit history graph\n   * @return {Array}\n   */\n  consolodateCommitMessages(graph) {\n    const commits = [ ...graph ];\n\n    commits.forEach((item) => {\n      let { summary, fullText } = item;\n\n      item.graph.merged.forEach((merged) => {\n        // Skip reverted commits\n        if (merged.reverted) {\n          return;\n        }\n        fullText += `\\n${merged.fullText.trim()}`;\n      });\n\n      item.fullText = fullText.trim();\n    });\n\n    return commits;\n  }\n}\n"],"file":"SourceControl.js"}