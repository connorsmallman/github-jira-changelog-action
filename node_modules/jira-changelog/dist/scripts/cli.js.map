{"version":3,"sources":["../../src/cli.js"],"names":["runProgram","commandLineArgs","pkg","require","program","version","option","parseRange","parse","process","argv","gitPath","cwd","args","length","path","resolve","config","jira","Jira","source","SourceControl","release","generateReleaseVersionName","console","log","range","getRangeObject","commitLogs","getCommitLogs","changelog","generate","entitles","AllHtmlEntities","tmplData","releaseVersions","changelogMessage","decode","slack","postToSlack","e","error","stack","exit","data","Slack","isEnabled","channel","Error","transformForSlack","Promise","postMessage","err","rangeStr","split","defaultRange","sourceControl","from","to","dateRange","after","before","Object","keys","assign"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n/**\n * The jira-changelog CLI\n */\n\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\nimport 'source-map-support/register';\nimport program from 'commander';\nimport path from 'path';\nimport Slack from './Slack';\nimport { AllHtmlEntities } from 'html-entities';\n\nimport { generateTemplateData, renderTemplate } from './template';\nimport {readConfigFile} from './Config';\nimport SourceControl from './SourceControl';\nimport Jira from './Jira';\n\nrunProgram();\n\n/**\n * Parse command line arguments\n */\nfunction commandLineArgs() {\n  const pkg = require('../../package.json');\n  program\n    .version(pkg.version)\n    .option(\n      '-c, --config <filepath>',\n      'Path to the config file.'\n    )\n    .option(\n      '-r, --range <from>...<to>',\n      'git commit range for changelog',\n      parseRange\n    )\n    .option(\n      '-d, --date <date>[...date]',\n      'Only include commits after this date',\n      parseRange\n    )\n    .option(\n      '-s, --slack',\n      'Automatically post changelog to slack (if configured)'\n    )\n    .option(\n      '--release [release]',\n      'Assign a release version to these stories'\n    )\n    .parse(process.argv);\n}\n\n/**\n * Run the main program\n */\nasync function runProgram() {\n  try {\n    commandLineArgs();\n\n    // Determine the git workspace path\n    let gitPath = process.cwd();\n    if (program.args.length) {\n      gitPath = program.args[0];\n    }\n    gitPath = path.resolve(gitPath);\n\n    const config = readConfigFile(gitPath);\n    const jira = new Jira(config);\n    const source = new SourceControl(config);\n\n    // Release flag used, but no name passed\n    if (program.release === true) {\n      if (typeof config.jira.generateReleaseVersionName !== 'function') {\n        console.log(\"You need to define the jira.generateReleaseVersionName function in your config, if you're not going to pass the release version name in the command.\")\n        return;\n      }\n      program.release = await config.jira.generateReleaseVersionName();\n    }\n\n    // Get logs\n    const range = getRangeObject(config);\n    const commitLogs = await source.getCommitLogs(gitPath, range);\n    const changelog = await jira.generate(commitLogs, program.release);\n\n    // Render template\n    const entitles = new AllHtmlEntities();\n    const tmplData = await generateTemplateData(config, changelog, jira.releaseVersions);\n    let changelogMessage = renderTemplate(config, tmplData);\n    changelogMessage = entitles.decode(changelogMessage)\n\n    // Output to console\n    console.log(changelogMessage);\n\n    // Post to slack\n    if (program.slack) {\n      await postToSlack(config, tmplData, changelogMessage);\n    }\n  } catch(e) {\n    console.error(e.stack || e);\n    process.exit(1);\n  }\n}\n\n/**\n * Post the changelog to slack\n *\n * @param {Object} config - The configuration object\n * @param {Object} data - The changelog data object.\n * @param {String} changelogMessage - The changelog message\n */\nasync function postToSlack(config, data, changelogMessage) {\n  const slack = new Slack(config);\n\n  if (!slack.isEnabled() || !config.slack.channel) {\n    throw new Error('Error: Slack is not configured.');\n    return;\n  }\n\n  console.log(`\\nPosting changelog message to slack channel: ${config.slack.channel}...`);\n  try {\n\n    // Transform for slack\n    if (typeof config.transformForSlack == 'function') {\n      changelogMessage = await Promise.resolve(config.transformForSlack(changelogMessage, data));\n    }\n\n    // Post to slack\n    await slack.postMessage(changelogMessage, config.slack.channel);\n    console.log('Sent');\n\n  } catch(err) {\n    throw new Error(err);\n  }\n}\n\n/**\n * Convert a range string formatted as \"a...b\" into an array.\n *\n * @param {String} rangeStr - The range string.\n * @return {Array}\n */\nfunction parseRange(rangeStr) {\n  return rangeStr.split(/\\.{3,3}/);\n}\n\n\n/**\n * Construct the range object from the CLI arguments and config\n *\n * @param {Object} config - The config object provided by Config.getConfigForPath\n * @return {Object}\n */\nfunction getRangeObject(config) {\n  const range = {};\n  const defaultRange = (config.sourceControl && config.sourceControl.defaultRange) ? config.sourceControl.defaultRange : {};\n\n  if (program.range && program.range.length) {\n    range.from = program.range[0];\n    range.to = program.range[1];\n  }\n  if (program.dateRange && program.dateRange.length) {\n    range.after = program.dateRange[0];\n    if (program.dateRange.length > 1) {\n      range.before = program.dateRange[1];\n    }\n  }\n\n  // Use default range\n  if (!Object.keys(range).length && Object.keys(defaultRange).length) {\n    Object.assign(range, defaultRange);\n  }\n\n  if (!Object.keys(range).length){\n      throw new Error('No range defined for the changelog.');\n  }\n  return range;\n}\n"],"file":"cli.js"}