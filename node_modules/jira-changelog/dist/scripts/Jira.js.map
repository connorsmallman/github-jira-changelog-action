{"version":3,"sources":["../../src/Jira.js"],"names":["promiseThrottle","PromiseThrottle","requestsPerSecond","promiseImplementation","Promise","Jira","constructor","config","slack","Slack","jira","undefined","releaseVersions","ticketPromises","host","username","password","api","email","token","console","warn","JiraApi","protocol","apiVersion","strictSSL","error","generate","commitLogs","releaseVersion","logs","promises","map","commit","findJiraInCommit","then","log","push","catch","e","resolve","all","ticketsHash","ticketsList","forEach","tickets","ticket","id","Object","keys","k","length","addTicketsToReleaseVersion","Error","commitLog","assign","found","ticketKeys","parseTicketsFromString","fullText","key","fetchJiraTicket","filter","t","includeTicket","ticketKey","promise","add","getJiraIssue","bind","versionName","versionPromises","updateTicketVersion","project","fields","verPromise","createProjectVersion","ver","projectKey","versionObj","fixVersions","name","result","updateIssue","err","JSON","stringify","searchName","toLowerCase","versions","getVersions","exists","find","v","createVersion","ticketId","reject","findIssue","origTicket","findUser","reporter","emailAddress","displayName","slackUser","type","issuetype","includeIssueTypes","excludeIssueTypes","Array","isArray","includes","str","configPattern","ticketIDPattern","searchPattern","RegExp","source","flags","matches","match","toUpperCase","m"],"mappings":"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","sourcesContent":["import \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\nimport JiraApi from 'jira-client';\nimport PromiseThrottle from 'promise-throttle';\nimport Slack from './Slack';\n\nconst promiseThrottle = new PromiseThrottle({\n  requestsPerSecond: 10,\n  promiseImplementation: Promise\n});\n\n/**\n * Generate changelog by matching source control commit logs to jiar tickets.\n */\nexport default class Jira {\n\n  constructor(config) {\n    this.config = config;\n    this.slack = new Slack(config);\n    this.jira = undefined;\n    this.releaseVersions = [];\n    this.ticketPromises = {};\n\n    const { host, username, password} = config.jira.api;\n    let { email, token } = config.jira.api;\n\n    if (!token && typeof password !== 'undefined') {\n      console.warn('WARNING: Jira password is deprecated. Use an API token instead.');\n      token = password\n    }\n    if (!email && typeof username !== 'undefined') {\n      console.warn('WARNING: Jira username is deprecated for API authentication. Use user email instead.');\n      email = username\n    }\n\n    if (config.jira.api.host) {\n      this.jira = new JiraApi({\n        host,\n        username: email,\n        password: token,\n        protocol: 'https',\n        apiVersion: 2,\n        strictSSL: true\n      });\n    } else {\n      console.error('ERROR: Cannot configure Jira without a host configuration.');\n    }\n  }\n\n  /**\n   * Generate changelog by matching source control commit logs to jira tickets\n   * and, optionally, creating the release version.\n   *\n   * @param {Array} commitLogs - A list of source control commit logs.\n   * @param {String} releaseVersion - The name of the release version to create.\n   * @return {Object}\n   */\n  async generate(commitLogs, releaseVersion=null) {\n    const logs = [];\n    this.releaseVersions = [];\n    try {\n\n      const promises = commitLogs.map((commit) => (\n        this.findJiraInCommit(commit, releaseVersion)\n          .then((log) => { logs.push(log); })\n          .catch((e) => { console.error(e); })\n      ));\n      promises.push(Promise.resolve()); // ensure at least one\n      await Promise.all(promises);\n\n      // Get all Jira tickets (filter out duplicates by keying on ID)\n      let ticketsHash = {};\n      let ticketsList = [];\n      logs.forEach((log) => {\n        log.tickets.forEach(ticket => ticketsHash[ticket.id] = ticket);\n      });\n      ticketsList = Object.keys(ticketsHash).map(k => ticketsHash[k]);\n\n      // If there are Jira tickets, create a release for them\n      if (ticketsList.length && releaseVersion) {\n        return this.addTicketsToReleaseVersion(ticketsList, releaseVersion).then(() => logs);\n      }\n\n      return logs;\n    } catch(e) {\n      throw new Error(e);\n    }\n  }\n\n  /**\n   * Find JIRA ticket numbers in a commit log, and automatically load the\n   * ticket info for it.\n   *\n   * @param {Object} commitLog - Commit log object\n   * @param {String} releaseVersion - Release version eg, mobileweb-1.8.0\n   * @return {Promsie} Resolves to an object with a jira array property\n   */\n  async findJiraInCommit(commitLog) {\n    const log = Object.assign({tickets: []}, { ...commitLog } );\n    const promises = [];\n    const found = {};\n\n    // Search for jira ticket numbers in the commit text\n    const ticketKeys = this.parseTicketsFromString(log.fullText);\n    ticketKeys.forEach((key) => {\n      // Skip loading if we're loading this one\n      if (found[key]){\n        return;\n      }\n      found[key] = true;\n\n      promises.push(\n        this.fetchJiraTicket(key).catch(() => {}) // ignore errors\n      );\n    });\n\n    // Add jira tickets to log\n    const tickets = await Promise.all(promises);\n    log.tickets = tickets.filter(t => (t && this.includeTicket(t)))\n\n    return log;\n  }\n\n  /**\n   * Load a Jira issue ticket from the API.\n   *\n   * @param {String} ticketKey - The Jira ticket ID key\n   *\n   * @return {Promise}\n   */\n  fetchJiraTicket(ticketKey) {\n    if (!ticketKey) {\n      return Promise.resolve();\n    }\n\n    // Get Jira issue ticket object\n    let promise = this.ticketPromises[ticketKey];\n    if (!promise) {\n      promise = promiseThrottle.add(\n        this.getJiraIssue.bind(this, ticketKey)\n      );\n      promise.catch(() => {\n        console.log(`Ticket ${ticketKey} not found`);\n      });\n      this.ticketPromises[ticketKey] = promise;\n    }\n\n    return promise;\n  }\n\n  /**\n   * Creates a release version and assigns tickets to it.\n   *\n   * @param {Array} ticket - List of Jira ticket objects\n   * @param {String} versionName - The name of the release version to add the ticket to.\n   * @return {Promise}\n   */\n  async addTicketsToReleaseVersion(tickets, versionName) {\n    const versionPromises = {};\n    this.releaseVersions = [];\n\n    // Create version and add it to a ticket\n    async function updateTicketVersion(ticket) {\n      const project = ticket.fields.project.key;\n\n      // Create version on project\n      let verPromise = versionPromises[project];\n      if (!verPromise) {\n        verPromise = this.createProjectVersion(versionName, project);\n        versionPromises[project] = verPromise;\n\n        // Add to list of releases\n        verPromise.then((ver) => {\n          ver.projectKey = project;\n          this.releaseVersions.push(ver);\n        });\n      }\n\n      // Add version to ticket\n      const versionObj = await verPromise;\n      const { fixVersions } = ticket.fields;\n      fixVersions.push({ name: versionObj.name });\n\n      const result = await this.jira.updateIssue(ticket.id, {\n        fields: { fixVersions }\n      });\n      return result;\n    }\n\n    // Loop through tickets and throttle the promises.\n    const promises = tickets.map((ticket) => {\n      return promiseThrottle\n        .add(updateTicketVersion.bind(this, ticket))\n        .catch((err) => {\n          if (err instanceof Error) {\n            console.log(err);\n          } else {\n            console.log(JSON.stringify(err, null, '  '));\n          }\n          console.log(`Could not assign ticket ${ticket.key} to release '${versionName}'!`);\n        });\n    });\n    return Promise.all(promises);\n  }\n\n  /**\n   * Add a version to a single project, if it doesn't current exist\n   * @param {String} versionName - The version name\n   * @param {Array} projectKey - The project key\n   * @return {Promise<String>} Resolves to version name string, as it exists in JIRA\n   */\n  async createProjectVersion(versionName, projectKey) {\n    let searchName = versionName.toLowerCase();\n    const versions = await this.jira.getVersions(projectKey);\n\n    const exists = versions.find(v => v.name.toLowerCase() == searchName);\n    if (exists) {\n      return exists;\n    }\n\n    const result = await this.jira.createVersion({\n      name: versionName,\n      project: projectKey\n    });\n    return result;\n  }\n\n  /**\n   * Retreive the jira issue by ID.\n   * Also attempt to match a slack user to the reporter's email address.\n   *\n   * @param {String} ticketId - The ticket ID of the issue to retrieve.\n   * @return {Promise} Resolves a jira issue object, with added `slackUser` property.\n   */\n  async getJiraIssue(ticketId) {\n    if (!this.jira) {\n      return Promise.reject('Jira is not configured.');\n    }\n\n    return this.jira.findIssue(ticketId).then((origTicket) => {\n      const ticket = Object.assign({}, origTicket);\n      return this.slack.findUser(ticket.fields.reporter.emailAddress, ticket.fields.reporter.displayName)\n      .then((slackUser) => {\n        ticket.slackUser = slackUser;\n        return ticket;\n      })\n      .catch(() => ticket);\n    });\n  }\n\n  /**\n   * Should ticket be included in changelog\n   * @param   {Object} ticket - Jira ticket object\n   * @returns {Boolean}\n   */\n  includeTicket(ticket) {\n    if (!ticket.fields) {\n      return false;\n    }\n\n    const type = ticket.fields.issuetype.name;\n    const {includeIssueTypes, excludeIssueTypes} = this.config.jira;\n    if (Array.isArray(includeIssueTypes) && includeIssueTypes.length) {\n      return includeIssueTypes.includes(type);\n    }\n    else if (Array.isArray(excludeIssueTypes)) {\n      return !excludeIssueTypes.includes(type);\n    }\n    return true;\n  }\n\n  /**\n   * Parse the JIRA ticket keys embedded in a string.\n   * @param   {Object} str - The string to parse them out of.\n   * @returns {Array} List of tickets\n   */\n  parseTicketsFromString(str) {\n    const configPattern = this.config.jira.ticketIDPattern;\n    const searchPattern = new RegExp(configPattern.source, `${configPattern.flags || ''}g`);\n    const matches = str.match(searchPattern) || [];\n\n    // Extract ticket from pattern\n    return matches\n      .map((match) => {\n        let key = match.match(configPattern);\n        key = (key.length > 1) ? key[1] : key[0];\n        if (!key) {\n          return null;\n        }\n        return key.toUpperCase();\n      })\n      .filter(m => !!m);\n  }\n}\n"],"file":"Jira.js"}