{"version":3,"sources":["../../src/Slack.js"],"names":["API_ROOT","MSG_SIZE_LIMIT","cache","pending","Slack","constructor","config","slackUsers","isEnabled","slack","apiKey","api","endpoint","method","body","undefined","headers","cachable","toUpperCase","url","Promise","reject","resolve","then","res","json","data","ok","getSlackUsers","response","error","err","console","members","findUser","email","name","users","toLowerCase","found","find","u","profile","real_name","real_name_normalized","postMessage","text","channel","length","chunks","splitUpMessage","sendPromise","reduce","promise","sendChunk","self","link_names","username","icon_emoji","icon_url","postArgs","lines","split","messages","continuation","limit","block","forEach","line","tmpBlock","push","last","substr","trim"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport urlencoded from 'form-urlencoded';\n\nconst API_ROOT = 'https://slack.com/api/';\nconst MSG_SIZE_LIMIT = 4000;\n\n// Cache of GET requests\nconst cache = {};\n\n// Cache of pending GET requests\nconst pending = {};\n\n/**\n * Manages the slack integration.\n */\nexport default class Slack {\n\n  constructor(config) {\n    this.config = config;\n    this.slackUsers = false;\n  }\n\n  /**\n   * Is the slack integration enabled\n   */\n  isEnabled() {\n    return (this.config.slack && this.config.slack.apiKey);\n  }\n\n  /**\n   * Make an API call and return the repsponse\n   *\n   * @param {String} endpoint - The API endpoint name. (i.e 'users.list')\n   * @param {String} method - The HTTP method to use (i.e. GET)\n   * @param {Object} body - The request body for POST or PUT. This will be serialized to application/x-www-form-urlencoded\n   *\n   * @return {Promise}\n   */\n  api(endpoint, method='GET', body=undefined) {\n    const headers = {};\n    const cachable = (method.toUpperCase() == 'GET');\n    const url = `${API_ROOT}/${endpoint}?token=${this.config.slack.apiKey}`;\n\n    if (!this.isEnabled()) {\n      return Promise.reject('The slack API is not configured.');\n    }\n\n    if (typeof body === 'object') {\n      body = urlencoded(body);\n    }\n    if (method === 'POST') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n    else if (cachable && cache[url]) {\n      return Promise.resolve(cache[url]);\n    }\n    else if (method === 'GET' && pending[url]) {\n      return pending[url];\n    }\n\n    pending[url] = fetch(url, { method, body, headers })\n    .then(res => res.json())\n    .then((data) => {\n      // Cache result\n      if (cachable && data && data.ok) {\n        cache[url] = data;\n      }\n      return data;\n    });\n\n    return pending[url];\n  }\n\n  /**\n   * Load all the slack users.\n   *\n   * @returns {Promise} Resolves to the user object list\n   */\n  getSlackUsers() {\n\n    // No slack integration\n    if (!this.isEnabled()) {\n      return Promise.resolve([]);\n    }\n\n    // Already loaded users\n    if (this.slackUsers) {\n      return Promise.resolve(this.slackUsers);\n    }\n\n    // Get users\n    return this.api(\"users.list\")\n    .then((response) => {\n      if (!response || response.error) {\n        const err = (response) ? response.error : 'No response from server';\n        console.error('Could not load slack users:', err);\n        return Promise.reject(err);\n      }\n\n      this.slackUsers = response.members;\n      return this.slackUsers;\n    });\n  }\n\n  /**\n   * Try to find a slack user by email and/or name\n   *\n   * @param {String} email - The email address to use to lookup the slack user.\n   * @param {String} name - The full name to use to lookup the slack user.\n   * @return {Promise} Resolves to the slack user object or undefined\n   */\n  findUser(email, name) {\n    return this.getSlackUsers()\n    .then((users) => {\n\n      // Try by email first (more exact match)\n      email = email.toLowerCase();\n      let found = users.find(u => (u.profile.email && u.profile.email.toLowerCase() === email));\n\n      // Fallback to name\n      if (!found && name) {\n        name = name.toLowerCase();\n        found = users.find((u) => {\n          const profile = u.profile;\n          return (profile.real_name && profile.real_name.toLowerCase() === name) ||\n                 (profile.real_name_normalized && profile.real_name_normalized.toLowerCase() === name);\n        });\n      }\n\n      return found;\n    });\n  }\n\n  /**\n   * Post a message to a slack channel.\n   * If the message is longer than slack's limit, it will be cut into multiple messages.\n   *\n   * @param {String} text - The message to send to slack\n   * @param {String} channel - The slack channel ID to send the message to. (i.e. `#engineering`)\n   *\n   * @return {Promise} Resolves when message has sent\n   */\n  postMessage(text, channel) {\n\n    // No message\n    if (!text || !text.length) {\n      return Promise.reject('No text to send to slack.');\n    }\n\n    // No slack integration\n    if (!this.isEnabled()) {\n      return Promise.resolve({});\n    }\n\n    const chunks = this.splitUpMessage(text);\n\n    // Send all message chunks\n    const sendPromise = chunks.reduce((promise, text) => {\n      return promise.then(() => sendChunk(text));\n    }, Promise.resolve());\n\n    // Sends a single message to the channel and returns a promise\n    const self = this;\n    function sendChunk(text) {\n      return self.api('chat.postMessage', 'POST',\n        {\n          text,\n          channel,\n          link_names: true,\n          username: self.config.slack.username,\n          icon_emoji: self.config.slack.icon_emoji,\n          icon_url: self.config.slack.icon_url,\n          ...self.config.slack.postArgs,\n        }).then((response) => {\n          if (response && !response.ok) {\n            throw response.error;\n          }\n          return response;\n        }\n      );\n    }\n\n    return sendPromise;\n  }\n\n  /**\n   * Cut a message into chunks that fit Slack's message length limits.\n   * The text will be divided by newline characters, where possible.\n   *\n   * @param {String} text - The message text to split up.\n   *\n   * @return {Array}\n   */\n  splitUpMessage(text) {\n    if (text.length <= MSG_SIZE_LIMIT) {\n      return [text];\n    }\n\n    const lines = text.split('\\n');\n    const messages = [];\n    const continuation = '...';\n    const limit = MSG_SIZE_LIMIT - continuation.length;\n    let block = '';\n\n    lines.forEach((line) => {\n      const tmpBlock = `${block}${line}\\n`;\n\n      // Within size limit\n      if (tmpBlock.length <= MSG_SIZE_LIMIT) {\n        block = tmpBlock;\n      }\n      // Bigger than size limit\n      else {\n\n        // Add last block and start new one\n        if (block.length) {\n          messages.push(block);\n          block = line;\n        }\n\n        // No existing block, this line must be loner than the limit\n        else {\n          while (line.length > 0) {\n            let last = line.substr(0, limit).trim();\n            line = line.substr(limit).trim();\n\n            // Add continuation characters\n            if (line.length) {\n              last += continuation;\n              line = `${continuation}${line}`;\n            }\n            messages.push(last);\n          }\n        }\n      }\n    });\n    if (block) {\n      messages.push(block);\n    }\n\n    return messages;\n  }\n}\n"],"file":"Slack.js"}